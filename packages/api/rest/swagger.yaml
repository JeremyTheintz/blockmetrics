openapi: 3.0.0
servers:
  - description: REST API
    url: https://api-rest.block-metrics.io
info:
  description: Blockmetrics REST API
  version: '1.0.0'
  title: Blockmetrics REST API
  contact:
    email: jeremy@block-metrics.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Blockchains
    description: Fetch all listed blockchains data. For the moment the listed blockchains are ethereum, binance-smart-chain, polygon, fantom, avalanche and bitcoin
  - name: Blockchain
    description: Fetch single blockchain data
paths:
  /blockchains:
    get:
      tags:
        - Blockchains
      summary: search blockchains
      operationId: searchBlockchains
      description: |
        Return an array blockchains objects.
      parameters:
        - in: query
          name: desc
          description: Sort result
          required: false
          schema:
            type: boolean
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [
                name,
                score
                node_count,
                testnet_node_count,
                single_node_power_consumption,
                blockchain_power_consumption,
                hashrate,
                difficulty,
                last_block_timestamp,
                token_count,
                transaction_count,
                gas_price,
                consensus,
                today_transaction_count,
                address_count,
                today_address_count,
                today_user_count,
                today_contract_count
              ]
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blockchain'
        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchains data

  /blockchains/total:
    get:
      tags:
        - Blockchains
      summary: search blockchains total
      operationId: searchBlockchainsTotal
      description: |
        Return a sum of a property from blockchains objects.
      parameters:
        - in: query
          name: type
          description: The property to sum
          required: true
          schema:
            type: string
            enum:
              [
                powerConsumption,
                tokenCount,
                nodeCount,
                transactionCount,
                todayTransactionCount,
                addressCount,
                todayAddressCount
              ]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: number
                example: 100
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing parameter

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain chart data where type is ${type}

  /blockchains/chart:
    get:
      tags:
        - Blockchains
      summary: blockchains monthly chart
      operationId: blockchainsMonthlyChart
      description: |
        Return monthly chart data for the blockchains
      parameters:
        - in: query
          name: type
          description: the property corresponding to the desired chart
          required: true
          schema:
            type: string
            enum: [activeUsers, transactionsCount, powerConsumption, totalValueLocked]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChartPoint'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing parameter

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain chart data where type is ${type}

  /blockchain:
    get:
      tags:
        - Blockchain
      summary: search blockchain
      operationId: searchBlockchain
      description: |
        Return an array blockchains objects.
      parameters:
        - in: query
          name: id
          description: id of the blockchain to fetch
          required: true
          schema:
            type: string
            enum: [ethereum, binance-smart-chain, polygon, fantom, avalanche, bitcoin]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Blockchain'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing id

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain data where id is ${id}

  /blockchain/all:
    get:
      tags:
        - Blockchain
      summary: blockchain and metadata
      operationId: searchBlockchainMetadataAndScore
      description: |
        Return the blockchain and the metadata
      parameters:
        - in: query
          name: id
          description: Id of the blockchain to fetch
          required: true
          schema:
            type: string
            enum: [ethereum, binance-smart-chain, polygon, fantom, avalanche, bitcoin]
        - in: query
          name: language
          description: Choose the language of the metadata
          required: true
          schema:
            type: string
            default: en

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Blockchain'
                  - $ref: '#/components/schemas/Metadata'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing id

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain and metadata data where id is ${id}

  /blockchain/metadata:
    get:
      tags:
        - Blockchain
      summary: metadata of the blockchain
      operationId: searchBlockchainMetadata
      description: |
        Return the metadata of a blockchain
      parameters:
        - in: query
          name: id
          description: Id of the blockchain to fetch
          required: true
          schema:
            type: string
            enum: [ethereum, binance-smart-chain, polygon, fantom, avalanche, bitcoin]
        - in: query
          name: language
          description: Choose the language of the metadata
          required: true
          schema:
            type: string
            default: en

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metadata'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing id

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain data where id is ${id}

  /blockchain/metadataAndScore:
    get:
      tags:
        - Blockchain
      summary: metadata and score of the blockchain
      operationId: searchBlockchainAndMetadata
      description: |
        Return the metadata and the score of a blockchain
      parameters:
        - in: query
          name: id
          description: Id of the blockchain to fetch
          required: true
          schema:
            type: string
            enum: [ethereum, binance-smart-chain, polygon, fantom, avalanche, bitcoin]
        - in: query
          name: language
          description: Choose the language of the metadata
          required: true
          schema:
            type: string
            default: en

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Metadata'
                  - $ref: '#/components/schemas/Score'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing id

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching metadata and score data where id is ${id}

  /blockchain/chart:
    get:
      tags:
        - Blockchain
      summary: blockchain monthly chart
      operationId: blockchainMonthlyChart
      description: |
        Return monthly chart data for the blockchain
      parameters:
        - in: query
          name: id
          description: Id of the blockchain to fetch
          required: true
          schema:
            type: string
            enum: [ethereum, binance-smart-chain, polygon, fantom, avalanche, bitcoin]
        - in: query
          name: type
          description: the property corresponding to the desired chart
          required: true
          schema:
            type: string
            enum:
              [
                activeUsers,
                averageBlocktime,
                averageGasPrice,
                difficulty,
                hashrate,
                newAddress,
                newContract,
                newTokens,
                tokenCount,
                nodeCount,
                powerConsumption,
                transactionCount,
                totalValueLocked
              ]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChartPoint'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: string
                example: Missing or wrong parameter

        '500':
          description: The server can't successfuly execute the request
          content:
            application/json:
              schema:
                type: string
                example: Error fetching blockchain chart data where id is ${id}

components:
  schemas:
    Blockchain:
      type: object
      required:
        - id
        - name
        - node_count
        - testnet_node_count
        - single_node_power_consumption
        - blockchain_power_consumption
        - hashrate
        - difficulty
        - last_block_timestamp
        - token_count
        - transaction_count
        - gas_price
        - consensus
        - today_transaction_count
        - address_count
        - today_address_count
        - total_value_locked
      properties:
        id:
          type: string
          format: uuid
          example: ethereum
        name:
          type: string
          example: Ethereum
        score:
          type: integer
          example: 42
        node_count:
          type: integer
          example: 5000
        testnet_node_count:
          type: integer
          example: 0
        single_node_power_consumption:
          type: number
          example: 50
        blockchain_power_consumption:
          type: number
          example: 100000
        hashrate:
          type: number
          example: 169.145948
        difficulty:
          type: number
          example: 1359284933
        last_block_timestamp:
          type: number
          example: 1564984100
        token_count:
          type: integer
          example: 4890
        transaction_count:
          type: integer
          example: 178039483
        gas_price:
          type: number
          example: 250000000
        consensus:
          type: string
          example: PoW
        today_transaction_count:
          type: integer
          example: 1928493
        address_count:
          type: integer
          example: 192849345
        today_address_count:
          type: integer
          example: 1928493
        today_user_count:
          type: integer
          example: 19284
        today_contract_count:
          type: integer
          example: 267893
        total_value_locked:
          type: integer
          example: 192849308903

    Metadata:
      type: object
      required:
        - id
        - blockchain_id
        - description
        - tagline
        - genesis_block
        - source
        - links

      properties:
        id:
          type: string
          format: uuid
          example: ethereum
        blockchain_id:
          type: string
          format: uuid
          example: ethereum
        description:
          type: string
          example: Ethereum is a decentralized platform that runs on the Ethereum blockchain.
        tagline:
          type: string
          example: Decentralized, open source, community-driven platform for financial transactions.
        genesis_block:
          type: number
          example: 10000000
        source:
          type: string
          example: https://ethereum.org/
        links:
          type: array
          items:
            type: string
            example: https://ethereum.org/

    Score:
      type: object
      required:
        - score
        - rank
        - reliability
        - token_count
        - power_consumption
        - proof_of_trust
        - community

      properties:
        score:
          type: number
          example: 46
        rank:
          type: string
          example: B-
        reliability:
          type: number
          example: 100
        token_count:
          type: integer
          example: 100
        power_consumption:
          type: number
          example: 21
        proof_of_trust:
          type: number
          example: 89
        community:
          type: number
          example: 43

    ChartPoint:
      type: object
      required:
        - date
        - value

      properties:
        date:
          type: number
          example: 1847394837
        value:
          type: number
          example: 1888000000
